// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  fullName         String
  profileImage     String?
  phone            String?
  role             Role      @default(USER)
  isVerified       Boolean   @default(false)
  otp              OTP?
  bookings         Booking[]
  createdRooms     Room[]    @relation("AdminRooms")
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Room {
  id          String      @id @default(uuid())
  title       String
  description String
  price       Float
  available   Boolean     @default(true)
  images      RoomImage[]
  bookings    Booking[]
  createdBy   User        @relation("AdminRooms", fields: [adminId], references: [id])
  adminId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model RoomImage {
  id       String @id @default(uuid())
  imageUrl String // URL
  room     Room   @relation(fields: [roomId], references: [id])
  roomId   String
}

model Booking {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  checkIn   DateTime
  checkOut  DateTime
  status    String   @default("PENDING") // Or an enum
  payment   Payment?
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(uuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String   @unique
  amount    Float
  method    String // e.g., "CARD", "WALLET"
  paidAt    DateTime @default(now())
  status    String   @default("PAID") // Or an enum
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime @default(now())
}
